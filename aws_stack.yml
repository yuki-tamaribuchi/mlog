AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation stack for mlog project


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteToGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 172.31.0.0/20
      VpcId: !Ref VPC

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 172.31.16.0/20
      VpcId: !Ref VPC
  
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1d
      CidrBlock: 172.31.32.0/20
      VpcId: !Ref VPC
  
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC

  #SecretManagerSecurityGroup:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupDescription: Inbound for ecs
  #    SecurityGroupIngress:
  #    - IpProtocol: tcp
  #      FromPort: 443
  #      ToPort: 443
  #      SourceSecurityGroupId: !Ref ECSSecurityGroup
  #    VpcId: !Ref VPC

  #SecretManagerVPCEndpoint:
  #  Type: AWS::EC2::VPCEndpoint
  #  Properties:
  #    ServiceName: com.amazonaws.ap-northeast-1.secretsmanager
  #    VpcId: !Ref VPC
  #    SubnetIds:
  #      - !Ref SubnetA
  #      - !Ref SubnetB
  #      - !Ref SubnetC
  #    PrivateDnsEnabled: true
  #    SecurityGroupIds:
  #      - !Ref SecretManagerSecurityGroup



#https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/quickref-ecs.html

  PrivateDnsNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: mlog.tamaribuchi-yuki.com
      Vpc: !Ref VPC

  ECSCluster:
    Type: AWS::ECS::Cluster
  
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for mlog
      VpcId: !Ref VPC

  ECSSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: AllowGetSecretValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: arn:aws:secretsmanager:ap-northeast-1:978584353258:secret:mlog-secrets-qx4ebY

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref AWS::StackName]]
      RetentionInDays: 14

  AppService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      LaunchType: FARGATE
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC
      PlatformVersion: 1.4.0
      TaskDefinition: !Ref AppTaskDefinition
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn: !GetAtt AppTaskDefinition.Arn

  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref AWS::StackName, -app]]
      ContainerDefinitions:
      - Name: app
        Essential: true
        Image: 978584353258.dkr.ecr.ap-northeast-1.amazonaws.com/mlog_python:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-mlog-app
        Command: [bash -c "cd /usr/src/app && python manage.py migrate && python manage.py compilemessages && uwsgi --socket :8001 --module mlog_project.wsgi --py-autoreload 1"]
        #Command: [bash -c "cd /usr/src/app && python manage.py collectstatic --noinput && python manage.py migrate && python manage.py compilemessages && uwsgi --socket :8001 --module mlog_project.wsgi --py-autoreload 1"]
        Environment: 
        - Name: MLOG_DEBUG_STATE
          Value: 'False'
        - Name: CELERY_BROKER_BACKENDS_DEFAULT
          Value: docker
        - Name: MLOG_DATABASE
          Value: production
        - Name: MLOG_AWS_RDS_DATABASE_NAME
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_RDS_DATABASE_NAME}}'
        - Name: MLOG_AWS_RDS_HOST
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_RDS_HOST}}'
        - Name: MLOG_AWS_RDS_PASSWORD
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_RDS_PASSWORD}}'
        - Name: MLOG_AWS_RDS_PORT
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_RDS_PORT}}'
        - Name: MLOG_AWS_RDS_USER
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_RDS_USER}}'
        - Name: MLOG_AWS_S3_ACCESS_KEY_ID
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_S3_ACCESS_KEY_ID}}'
        - Name: MLOG_AWS_SECRET_ACCESS_KEY
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_SECRET_ACCESS_KEY}}'
        - Name: MLOG_AWS_S3_STORAGE_BUCKET_NAME
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_S3_STORAGE_BUCKET_NAME}}'
        - Name: MLOG_AWS_SES_ACCESS_KEY_ID
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_SES_ACCESS_KEY_ID}}'
        - Name: MLOG_AWS_SES_SECRET_ACCESS_KEY
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_AWS_SES_SECRET_ACCESS_KEY}}'
        - Name: MLOG_S3_CUSTOM_DOMAIN
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_S3_CUSTOM_DOMAIN}}'
        - Name: MLOG_SECRET_KEY
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_SECRET_KEY}}'
        - Name: MLOG_DEFAULT_FROM_EMAIL
          Value: '{{resolve:secretsmanager:mlog-secrets:SecretString:MLOG_DEFAULT_FROM_EMAIL}}'
        - Name: SELECT2_DEFAULT
          Value: select2_docker
      RequiresCompatibilities:
      - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      Cpu: 256
      Memory: 512

  AppServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: app
      NamespaceId: !Ref PrivateDnsNamespace
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        NamespaceId: !Ref PrivateDnsNamespace
        RoutingPolicy: MULTIVALUE

  #CeleryService:
  #  Type: AWS::ECS::Service
  #  Properties:
  #    Cluster: !GetAtt ECSCluster.Arn
  #    LaunchType: FARGATE
  #    NetworkConfiguration:
  #      AwsvpcConfiguration:
  #        SecurityGroups:
  #          - !Ref ECSSecurityGroup
  #        Subnets:
  #          - !Ref SubnetA
  #          - !Ref SubnetB
  #          - !Ref SubnetC
  #    TaskDefinition: 
  #      !Ref CeleryTaskDefinition

  #CeleryTaskDefinition:
  #  Type: AWS::ECS::TaskDefinition
  #  Properties:
  #    Family: !Join ['', [!Ref AWS::StackName, -celery]]
  #    ContainerDefinitions:
  #    - Name: celery
  #      Cpu: 10
  #      Essential: true
  #      Image: 978584353258.dkr.ecr.ap-northeast-1.amazonaws.com/mlog_python:latest
  #      Memory: 300
  #      LogConfiguration:
  #        LogDriver: awslogs
  #        Options:
  #          awslogs-group: !Ref CloudwatchLogsGroup
  #          awslogs-region: !Ref AWS::Region
  #          awslogs-stream-prefix: ecs-mlog-app
  #      Command: [bash -c "apt install -y python-celery && cd /usr/src/app && celery -A mlog_project worker >/dev/null"]
  #    RequiresCompatibilities:
  #    - FARGATE
  #    NetworkMode: awsvpc
  #    ExecutionRoleArn: !Ref TaskExecutionRole
  #    Cpu: 256
  #    Memory: 512

  #CeleryServiceDiscovery:
  #  Type: AWS::ServiceDiscovery::Service
  #  Properties:
  #    Name: celery
  #    NamespaceId: !Ref PrivateDnsNamespace
  #    DnsConfig:
  #      DnsRecords:
  #      - TTL: 60
  #        Type: A
  #      NamespaceId: !Ref PrivateDnsNamespace
  #      RoutingPolicy: MULTIVALUE

  NginxLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: NginxLoadBalancer
      Scheme: internet-facing
      Subnets: 
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
      SecurityGroups: 
        - !Ref ECSSecurityGroup
      Type: application

  NginxTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      

  NginxLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref NginxTargetGroup
        Type: forward
      LoadBalancerArn: !Ref NginxLoadBalancer
      Port: 80
      Protocol: HTTP

  NginxLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: NginxLoadBalancerListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref NginxTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref NginxLoadBalancerListener
      Priority: 1


  NginxService:
    Type: AWS::ECS::Service
    DependsOn: NginxLoadBalancerListener
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: nginx
        ContainerPort: 80
        TargetGroupArn: !Ref NginxTargetGroup
        #LoadBalancerName: NginxLoadBalancer
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC
      PlatformVersion: 1.4.0
      TaskDefinition: !Ref NginxTaskDefinition
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn: !GetAtt NginxServiceDiscovery.Arn

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref AWS::StackName, -nginx]]
      ContainerDefinitions:
      - Name: nginx
        Essential: true
        Image: 978584353258.dkr.ecr.ap-northeast-1.amazonaws.com/mlog_nginx:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-mlog-app
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
          Protocol: tcp
      RequiresCompatibilities:
      - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      Cpu: 256
      Memory: 512

  NginxServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: nginx
      NamespaceId: !Ref PrivateDnsNamespace
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        NamespaceId: !Ref PrivateDnsNamespace
        RoutingPolicy: MULTIVALUE

  RedisService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      LaunchType: FARGATE
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC
      PlatformVersion: 1.4.0
      TaskDefinition: !Ref RedisTaskDefinition
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn: !GetAtt RedisServiceDiscovery.Arn

  RedisTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref AWS::StackName, -redis]]
      ContainerDefinitions:
      - Name: redis
        Essential: true
        Image: docker.io/library/redis:6.2
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-mlog-app
      RequiresCompatibilities:
      - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      Cpu: 256
      Memory: 512

  RedisServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: redis
      NamespaceId: !Ref PrivateDnsNamespace
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        NamespaceId: !Ref PrivateDnsNamespace
        RoutingPolicy: MULTIVALUE
  
  #ECSALB:
  #  Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #  Properties:
  #    Name: ECSALB
  #    Scheme: internet-facing
  #    Subnets: 
  #      - !Ref SubnetA
  #      - !Ref SubnetB
  #      - !Ref SubnetC
  #    SecurityGroups: [!Ref ECSSecurityGroup]

  #ALBListener:
  #  Type: AWS::ElasticLoadBalancingV2::Listener
  #  #DependsOn: ECSServiceRole
  #  Properties:
  #    DefaultActions:
  #    - Type: forward
  #      TargetGroupArn: !Ref NginxTargetGroup
  #    LoadBalancerArn: !Ref ECSALB
  #    Port: 80
  #    Protocol: HTTP
  

  #ECSALBListenerRule:
  #  Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #  DependsOn: ALBListener
  #  Properties:
  #    Actions:
  #    - Type: forward
  #      TargetGroupArn: !Ref NginxTargetGroup
  #    Conditions:
  #    - Field: path-pattern
  #      Values: [/]
  #    ListenerArn: !Ref ALBListener
  #    Priority: 1