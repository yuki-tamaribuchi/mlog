AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation stack for mlog project


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteToGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 172.31.0.0/20
      VpcId: !Ref VPC

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 172.31.16.0/20
      VpcId: !Ref VPC
  
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1d
      CidrBlock: 172.31.32.0/20
      VpcId: !Ref VPC
  
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC


#https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/quickref-ecs.html

  PrivateDnsNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: mlog.tamaribuchi-yuki.com
      Vpc: !Ref VPC

  ECSCluster:
    Type: AWS::ECS::Cluster
  
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for mlog
      VpcId: !Ref VPC

  ECSSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref AWS::StackName]]
      RetentionInDays: 14

  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref AWS::StackName, -app]]
      ContainerDefinitions:
      - Name: mlog-app
        Cpu: 10
        Essential: true
        Image: 978584353258.dkr.ecr.ap-northeast-1.amazonaws.com/mlog_python:latest
        Memory: 300
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-mlog-app
        Command: [bash -c "cd /usr/src/app && python manage.py migrate && python manage.py compilemessages && uwsgi --socket :8001 --module mlog_project.wsgi --py-autoreload 1"]
        #Command: [bash -c "cd /usr/src/app && python manage.py collectstatic --noinput && python manage.py migrate && python manage.py compilemessages && uwsgi --socket :8001 --module mlog_project.wsgi --py-autoreload 1"]

  AppServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: app
      NamespaceId: !Ref PrivateDnsNamespace
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        NamespaceId: !Ref PrivateDnsNamespace
        RoutingPolicy: MULTIVALUE

  CeleryTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref AWS::StackName, -celery]]
      ContainerDefinitions:
      - Name: mlog-celery
        Cpu: 10
        Essential: true
        Image: 978584353258.dkr.ecr.ap-northeast-1.amazonaws.com/mlog_python:latest
        Memory: 300
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-mlog-app
        Command: [bash -c "apt install -y python-celery && cd /usr/src/app && celery -A mlog_project worker >/dev/null"]

  CeleryServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: celery
      NamespaceId: !Ref PrivateDnsNamespace
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        NamespaceId: !Ref PrivateDnsNamespace
        RoutingPolicy: MULTIVALUE

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref AWS::StackName, -nginx]]
      ContainerDefinitions:
      - Name: mlog-nginx
        Cpu: 10
        Essential: true
        Image: 978584353258.dkr.ecr.ap-northeast-1.amazonaws.com/mlog_nginx:latest
        Memory: 300
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-mlog-app
        PortMappings:
          - ContainerPort: 80
            HostPort: 80
            Protocol: tcp

  NginxServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: nginx
      NamespaceId: !Ref PrivateDnsNamespace
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        NamespaceId: !Ref PrivateDnsNamespace
        RoutingPolicy: MULTIVALUE

  RedisTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref AWS::StackName, -redis]]
      ContainerDefinitions:
      - Name: mlog-redis
        Cpu: 10
        Essential: true
        Image: redis:6.2
        Memory: 300
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs-mlog-app

  RedisServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: redis
      NamespaceId: !Ref PrivateDnsNamespace
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        NamespaceId: !Ref PrivateDnsNamespace
        RoutingPolicy: MULTIVALUE
  
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSALB
      Scheme: internet-facing
      Subnets: 
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
      SecurityGroups: [!Ref ECSSecurityGroup]

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    #DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: HTTP
  

  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ECSTG
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1
  
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC